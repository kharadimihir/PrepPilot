// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?   
  imageUrl      String?
  industry      String?


  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


  bio           String?
  experience    Int?
  skills        String[]


  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]

}

model Assessment{
  id            String    @id @default(cuid())
  userId        String    
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     
  questions     Json[]    // Array of {question, answer, isCorrect, userAnswer}
  category      String    // "Technical", "Behaviroual", etc.
  improvementTip  String? // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}
model Resume{
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  // atsScore      Float?
  // feedback      String?
  content     String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model CoverLetter{
  id              String  @id @default(cuid())
  userId          String  
  user            User    @relation(fields: [userId], references: [id])
  content         String
  jobDescription  String?
  companyName     String  
  jobTitle        String
  status          String    @default("draft")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}


model IndustryInsight {
  id              String  @id @default(cuid())
  industry        String  @unique

  // users in this industry
  users            User[]


  // salary data
  salaryRanges    Json[]  // Array of { role: String, min: Float, max: Float, median: Float, location: String?}

  // Industry trends
  growthRate      Float
  demandLevel     DemandLevel
  topSkills       String[]

  // current market conditions
  marketOutlook   MarketOutlook  //"Positive", "Negative", "Neutral".
  keyTrends       String[]


  // Learning suggestions
  recommendedSkills String[]

  lastUpdated     DateTime  @default(now())
  nextUpdated     DateTime


  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

